name: Build and Push Kafka API

on:
  push:
    branches: [ master, develop ]
    paths:
      - 'src/**'
      - 'build.gradle'
      - 'settings.gradle'
      - 'Dockerfile'
  pull_request:
    branches: [ master ]
    paths:
      - 'src/**'
      - 'build.gradle'
      - 'settings.gradle'
      - 'Dockerfile'

env:
  REGISTRY: docker.io
  IMAGE_NAME: kafka-api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build -x test

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          # 고정 태그 (develop 브랜치용)
          type=raw,value=develop,enable={{is_default_branch}}
          # 버전 태그 (커밋 해시 기반)
          type=sha,prefix=v-
          # PR 태그
          type=ref,event=pr
          # 브랜치 태그 (develop 제외)
          type=ref,event=branch,enable={{is_default_branch == false}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
